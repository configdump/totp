#!/usr/bin/env python
"""
    Purpose : Generate time based one time password
    Author : Bharath Shetty
    Date : Fri 29, Apr, 2022
    usage : ./totp -p <profile_name>
    eg : ./totp -p dev
    Ref : http://tools.ietf.org/html/rfc6238

    Config File:
        Keep Configuration file under home directory(~/.totp.cfg) and the profiles.

    Syntax : [profile_name]
        Description : Description of the profile.
        Secret : XXXXXXXXXXXXXXXXXXXXXXXXXXXX

        eg: [dev]
        Description : user@dev.account.com.
        Secret : XXXXXXXXXXXXXXXXXXXXXXXXXXXX
"""

import hmac, base64, struct, hashlib, time
import configparser, argparse, os, sys

parser=argparse.ArgumentParser(description="Generate TOTP")
parser.add_argument("-p","--profile", help="profile name", required=True)
args=parser.parse_args()

class totp:
    def __init__(self):
        try:
            config = configparser.ConfigParser()
            config.read(['totp.cfg', os.path.expanduser('~/.totp.cfg')])
            self.description=config.get(args.profile,'Description')
            self.secret = config.get(args.profile,'Secret')
        except configparser.Error as err:
            print(f"Failed to read config file, reason: {err}")
            sys.exit(127)

    def get_totp_token(self):
            key = base64.b32decode(self.secret, True)
            msg = struct.pack(">Q", int(time.time())//30)
            h_mac = hmac.new(key, msg, hashlib.sha1).digest()
            o = h_mac[19] & 15
            token = (struct.unpack(">I",h_mac[o:o+4])[0] & 0x7fffffff) % 1000000
            return token

    def print_token(self):
        """ """
        previous = 0
        print("-" * len(self.description))
        print(self.description)
        print("-" * len(self.description))
        while True:
            try:
                current = self.get_totp_token()
                if current != previous:
                    sys.stdout.write("\r %0*d " % (6, current))
                    sys.stdout.flush()
                    previous = current
                time.sleep(1)
            except KeyboardInterrupt:
                print("\n Bye..")
                exit(0)


if __name__ == "__main__":
    totp().print_token()
